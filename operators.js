/*
// Операнд - то, к чему привеняется оператор (он же Аргумент)

let userAge = 20 + 6 // 20 и 6 операнды

// Бинарными называются операторы, 
// которые применяются к двум операндам.
// в случае выше, сложение - это бинарный оператор

// Унарным считается оператор, который применен 
// только к одному операнду. Пример:

let myWeight = -100

----------------------------------------------------------------------------------
// МАТЕМАТИЧЕСКИЕ ОПЕРАТОРЫ

let x;
x = 5 + 8;
x = 2 - 1;
x = 2 * 3;
x = 10 / 5;
x = 11 % 3; // Взятие остатка от деления. Результат: 2
x = 5 ** 3; // Возведение в степень. Результат: 125

----------------------------------------------------------------------------------
//СПЕЦИАЛЬНЫЕ ВОЗМОЖНОСТИ ОПЕРАТОРОВ

// СЛОЖЕНИЕ СТРОК. Если одна из операндов явл. строкой, то всё выражение будет строкой. 

let resultOne = 'Airat' + 'and' 'Aigul';
let resultTwo = 12 + 'some_string' // Результ - строка.

// Все остальные операторы, кроме сложения превращают операнды в числа

let resultOne = '25' - 5 // Результат - число 20
let resultTwo = '10' * 5 // Результат - число 50
let resultThree = 'Airat' * 3 // Результат - NaN

----------------------------------------------------------------------------------

// Унарный оператор сложения. Преобразует в число

let resOne = +'25' // Тип данных число

// Пример:
let users = '25';
let admins = '10;

console.log(users + admins); // Результат - 2510

console.log(+users + +admins) // Результат 35. у унарного оператора приоритет выполнения.

let resOne = 2 - 1 * 5 // Приоритет у умножения

let reTwo = (2 - 1) * 5 // У скобок самый высокий приоритет

----------------------------------------------------------------------------------
// ОПЕРАТОР ПРИСВАИВНИЯ

let a = 1 + 2;
let b = 2;

let result = (8 - (a = b + 3)) // Результат: 3

// Присваивание по цепочке

let resOne = resTwo = resThree = 1 + 3; // Все 3 переменные равны 3

// Сокращенная запись присваивания

let users = 5;
users = users + 3;

let users += 3; // Сокращенная запись, с остальными операторами тоже работает.

----------------------------------------------------------------------------------
// ИНКРЕМЕНТ И ДЕКРЕМЕНТ
// Икремент ++ добавляет 1, декремент -- вычитает 1

let addUser = 2;
addUser ++;
console.log(addUser) // Выведет 3

// Все 3 следущие записи идентичны

addUser = adduser + 1;
addUser += 1;
addUser ++;

// инкременты и декременты можно располагать как до, так и после операторов.

userCounter++; // Постфиксная форма
userCounter--;

++userCounter // Префиксная форма
--userCounter

// ПРИМЕР:
let userCounter = 0
let newUsers = userCounter++ // инкремент не сработает, он сначала присвоит

// ПРИМЕР 2
let userCounter = 0
let newUsers = ++userCounter // Инкремент сработает

----------------------------------------------------------------------------------
// ОПЕРАТОРЫ СРАВНЕНИЯ:
Больше: a > b
Меньше: a < b
Больше или равно: a >=
Меньше или равно: a <= b
Равно: a == b
Не равно: a != b
Строгое равно: a === b
Строгое не равно: a !== b

// Возвращают логический тип данных

let result = 11 > 10;
console.log(result); // Вернет тру

// Сравнение строк 
// Если кол-во символов одинаковое, то по буквам по алфавиту слева направо.
// Если кол-во символов разное, то сравнение по количеству символов

// При сравнении разных типов данных, всё будет приводится к число. Пример:

console.log('58' > 10); // True
----------------------------------------------------------------------------------
// Логические операторы
// Оператор || (ИЛИ)

console.log(true || false) // True

// 1. Вычисляет операнды слева направо.
// 2. Каждый операнд конвертируется в логическое значение.
// Если результат True, останавливается и возвращает исходное значение этого операнда
// 3. Если все операнды явл. ложными, вовзращает значение последнего из них

// ПРИМЕР:

// Первый true это 1
1 || 0
// Первый true это true
true || 'Фрилансер'
// Первые true это 58
null || 58